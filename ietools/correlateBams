#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
sys.path.append('/data/projects/ramirez/tools/IETools/')
sys.path.append('/galaxy/local_tools/mpi-ie/IETools/')
import argparse # to parse command line arguments
import numpy as np

from ietools.estimateScaleFactor import getNumReadsPerBin
from ietools import parserCommon
from scipy.stats import pearsonr, spearmanr
def parseArguments(args=None):
    parentParser = parserCommon.getParentArgParse()
    bamParser = parserCommon.bam()

    parser = argparse.ArgumentParser(description = \
                                         ( 'Genomes are split into bins of given '
                                           'length. For each bin the number of '
                                           'reads found for each of the bam '
                                           'files is counted. A correlation is '
                                           'computed for all pairs of bam files.'),
                                     parents=[parentParser, bamParser],
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     conflict_handler='resolve')

    # define the arguments
    parser.add_argument('--bamfiles', '-b',
                        metavar = 'list of bam files',
                        help = 'List of indexed bam files separated by space',
                        nargs = '+',
                        required = True)

    
    parser.add_argument('--binSize', '-bs',
                        help = 'Length in base pairs for a window used to sample the genome.',
                        default = 10000,
                        type = int)

    parser.add_argument('--numberOfSamples', '-n',
                        help = 'Number of samples taken from the genome to compute the scaling factors',
                        default = 1e5,
                        type = int)


    parser.add_argument('--corMethod',
                        help = 'correlation method to use',
                        choices = ['pearson', 'spearman'],
                        required=True)

    group = parser.add_argument_group('Output')

    group.add_argument('--outFileCorMatrix', '-o',
                        help = 'Output file name for the correlation matrix.',
                        metavar = 'FILENAME',
                        type=parserCommon.writableFile,
                        required=True)

    group.add_argument('--outRawCounts',
                        help = 'Output file name to save the bin counts',
                        metavar = 'FILENAME',
                        type=parserCommon.writableFile)

    args = parser.parse_args(args)
    args.extendPairedEnds = False if args.doNotExtendPairedEnds else True

    return(args)

def main(args):
    """
    1. get read counts at different positions all of same length
    
    2. compute  correlation

    """
    if len(bamfiles) < 2:
        print "Please input at least two bam files to compare"
        exit(1)

    num_reads_per_bin = getNumReadsPerBin(args.bamfiles, args.binSize, args.numberOfSamples, 
                                             args.fragmentLength, 
                                             numberOfProcessors=args.numberOfProcessors, 
                                             skipZeros=True, verbose=args.verbose,
                                             region=args.region)

    if args.outRawCounts:
        np.savetxt(args.outRawCounts, num_reads_per_bin, fmt='%d')

    # num_reads_per_bin: rows <- bins, cols <- samples
    M = len(args.bamfiles)
    #initialize correlation matrix
    corr_matrix = np.zeros( (M,M), dtype='float')
    # do an all vs all correlation
    rows, cols = np.triu_indices(M)
    options = {'spearman': spearmanr,
               'pearson': pearsonr}
    for index in xrange(len(rows)):
        row = rows[index]
        col = cols[index]
        corr_matrix[row, col] = options[args.corMethod](num_reads_per_bin[:,row],
                                                        num_reads_per_bin[:,col])[0]
    # make the matrix symetric
    corr_matrix = corr_matrix + np.triu(corr_matrix, 1).T

    np.savetxt(args.outFileCorMatrix, corr_matrix, fmt='%.4f')


if __name__ == "__main__":
    args = parseArguments()
    main(args)




